From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denis Grigorev <d.grigorev@omprussia.ru>
Date: Thu, 4 Feb 2021 21:14:28 +0300
Subject: [PATCH] [sailfishos][webrtc] Implement video capture module. JB#53982

---
 dom/media/systemservices/VideoFrameUtils.cpp  |  92 ++++---
 dom/media/systemservices/moz.build            |   1 +
 .../webrtc/modules/video_capture/BUILD.gn     |  26 +-
 .../video_capture/sfos/device_info_sfos.cc    | 145 ++++++++++
 .../video_capture/sfos/device_info_sfos.h     |  49 ++++
 .../video_capture/sfos/video_capture_sfos.cc  | 254 ++++++++++++++++++
 .../video_capture/sfos/video_capture_sfos.h   |  55 ++++
 .../video_capture/video_capture_impl.cc       |  12 +
 .../video_capture/video_capture_impl.h        |   2 +
 .../video_capture_internal_impl_gn/moz.build  |  13 +-
 old-configure.in                              |  11 +
 11 files changed, 606 insertions(+), 54 deletions(-)
 create mode 100644 media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.cc
 create mode 100644 media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.h
 create mode 100644 media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.cc
 create mode 100644 media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.h

diff --git a/dom/media/systemservices/VideoFrameUtils.cpp b/dom/media/systemservices/VideoFrameUtils.cpp
index caeda9289dbd..7f713bb2e623 100644
--- a/dom/media/systemservices/VideoFrameUtils.cpp
+++ b/dom/media/systemservices/VideoFrameUtils.cpp
@@ -7,6 +7,7 @@
 #include "VideoFrameUtils.h"
 #include "webrtc/video_frame.h"
 #include "mozilla/ShmemPool.h"
+#include "libyuv/rotate.h"
 
 namespace mozilla {
 
@@ -29,59 +30,68 @@ void VideoFrameUtils::InitFrameBufferProperties(
   aDestProps.ntpTimeMs() = aVideoFrame.ntp_time_ms();
   aDestProps.renderTimeMs() = aVideoFrame.render_time_ms();
 
+  // Rotation will be applied during CopyVideoFrameBuffers().
   aDestProps.rotation() = aVideoFrame.rotation();
-
   auto height = aVideoFrame.video_frame_buffer()->height();
-  aDestProps.yAllocatedSize() =
-      height * aVideoFrame.video_frame_buffer()->StrideY();
-  aDestProps.uAllocatedSize() =
-      ((height + 1) / 2) * aVideoFrame.video_frame_buffer()->StrideU();
-  aDestProps.vAllocatedSize() =
-      ((height + 1) / 2) * aVideoFrame.video_frame_buffer()->StrideV();
-
-  aDestProps.width() = aVideoFrame.video_frame_buffer()->width();
+  auto width = aVideoFrame.video_frame_buffer()->width();
+  if (aVideoFrame.rotation() == webrtc::kVideoRotation_90 ||
+      aVideoFrame.rotation() == webrtc::kVideoRotation_270) {
+    std::swap(width, height);
+  }
   aDestProps.height() = height;
+  aDestProps.width() = width;
 
-  aDestProps.yStride() = aVideoFrame.video_frame_buffer()->StrideY();
-  aDestProps.uStride() = aVideoFrame.video_frame_buffer()->StrideU();
-  aDestProps.vStride() = aVideoFrame.video_frame_buffer()->StrideV();
+  aDestProps.yStride() = width;
+  aDestProps.uStride() = (width + 1) / 2;
+  aDestProps.vStride() = (width + 1) / 2;
+
+  aDestProps.yAllocatedSize() = height * aDestProps.yStride();
+  aDestProps.uAllocatedSize() = ((height + 1) / 2) * aDestProps.uStride();
+  aDestProps.vAllocatedSize() = ((height + 1) / 2) * aDestProps.vStride();
 }
 
+// Performs copying to a shared memory or a temporary buffer.
+// Apply rotation here to avoid extra copying.
 void VideoFrameUtils::CopyVideoFrameBuffers(uint8_t* aDestBuffer,
                                             const size_t aDestBufferSize,
                                             const webrtc::VideoFrame& aFrame) {
-  size_t aggregateSize = TotalRequiredBufferSize(aFrame);
-
-  MOZ_ASSERT(aDestBufferSize >= aggregateSize);
+  const rtc::scoped_refptr<webrtc::VideoFrameBuffer> src = aFrame.video_frame_buffer();
+  libyuv::RotationMode rotationMode;
+  int width = src->width();
+  int height = src->height();
 
-  // If planes are ordered YUV and contiguous then do a single copy
-  if ((aFrame.video_frame_buffer()->DataY() != nullptr) &&
-      // Check that the three planes are ordered
-      (aFrame.video_frame_buffer()->DataY() <
-       aFrame.video_frame_buffer()->DataU()) &&
-      (aFrame.video_frame_buffer()->DataU() <
-       aFrame.video_frame_buffer()->DataV()) &&
-      //  Check that the last plane ends at firstPlane[totalsize]
-      (&aFrame.video_frame_buffer()->DataY()[aggregateSize] ==
-       &aFrame.video_frame_buffer()
-            ->DataV()[((aFrame.video_frame_buffer()->height() + 1) / 2) *
-                      aFrame.video_frame_buffer()->StrideV()])) {
-    memcpy(aDestBuffer, aFrame.video_frame_buffer()->DataY(), aggregateSize);
-    return;
+  switch (aFrame.rotation()) {
+    case webrtc::kVideoRotation_90:
+      rotationMode = libyuv::kRotate90;
+      std::swap(width, height);
+      break;
+    case webrtc::kVideoRotation_270:
+      rotationMode = libyuv::kRotate270;
+      std::swap(width, height);
+      break;
+    case webrtc::kVideoRotation_180:
+      rotationMode = libyuv::kRotate180;
+      break;
+    case webrtc::kVideoRotation_0:
+    default:
+      rotationMode = libyuv::kRotate0;
+      break;
   }
 
-  // Copy each plane
-  size_t offset = 0;
-  size_t size;
-  auto height = aFrame.video_frame_buffer()->height();
-  size = height * aFrame.video_frame_buffer()->StrideY();
-  memcpy(&aDestBuffer[offset], aFrame.video_frame_buffer()->DataY(), size);
-  offset += size;
-  size = ((height + 1) / 2) * aFrame.video_frame_buffer()->StrideU();
-  memcpy(&aDestBuffer[offset], aFrame.video_frame_buffer()->DataU(), size);
-  offset += size;
-  size = ((height + 1) / 2) * aFrame.video_frame_buffer()->StrideV();
-  memcpy(&aDestBuffer[offset], aFrame.video_frame_buffer()->DataV(), size);
+  int strideY = width;
+  int strideUV = (width + 1) / 2;
+  off_t offsetY = 0;
+  off_t offsetU = height * strideY;
+  off_t offsetV = offsetU + ((height + 1) / 2) * strideUV;
+
+  libyuv::I420Rotate(src->DataY(), src->StrideY(),
+                     src->DataU(), src->StrideU(),
+                     src->DataV(), src->StrideV(),
+                     &aDestBuffer[offsetY], strideY,
+                     &aDestBuffer[offsetU], strideUV,
+                     &aDestBuffer[offsetV], strideUV,
+                     src->width(), src->height(),
+                     rotationMode);
 }
 
 void VideoFrameUtils::CopyVideoFrameBuffers(
diff --git a/dom/media/systemservices/moz.build b/dom/media/systemservices/moz.build
index cafe81bf84d0..0fbe06b497ba 100644
--- a/dom/media/systemservices/moz.build
+++ b/dom/media/systemservices/moz.build
@@ -20,6 +20,7 @@ if CONFIG['MOZ_WEBRTC']:
         'VideoFrameUtils.cpp'
     ]
     LOCAL_INCLUDES += [
+        '/media/libyuv/libyuv/include/',
         '/media/webrtc/signaling',
         '/media/webrtc/trunk',
     ]
diff --git a/media/webrtc/trunk/webrtc/modules/video_capture/BUILD.gn b/media/webrtc/trunk/webrtc/modules/video_capture/BUILD.gn
index e4984238bac3..a2656ca22525 100644
--- a/media/webrtc/trunk/webrtc/modules/video_capture/BUILD.gn
+++ b/media/webrtc/trunk/webrtc/modules/video_capture/BUILD.gn
@@ -98,13 +98,24 @@ if (!build_with_chromium) {
 
     if (is_linux || is_bsd) {
       sources = [
-        "linux/device_info_linux.cc",
-        "linux/device_info_linux.h",
-        "linux/video_capture_linux.cc",
-        "linux/video_capture_linux.h",
+        "sfos/device_info_sfos.cc",
+        "sfos/device_info_sfos.h",
+        "sfos/video_capture_sfos.cc",
+        "sfos/video_capture_sfos.h",
       ]
+
       deps += [ "../..:webrtc_common" ]
+
+      if (rtc_build_libyuv) {
+        deps += [ "$rtc_libyuv_dir" ]
+        public_deps = [
+          "$rtc_libyuv_dir",
+          ]
+      } else {
+        include_dirs += [ "$rtc_libyuv_dir/include" ]
+      }
     }
+
     if (is_win) {
       sources = [
         "windows/device_info_ds.cc",
@@ -211,13 +222,6 @@ if (!build_with_chromium) {
           "-lm",
         ]
       }
-      if (is_linux) {
-        ldflags += [
-          "-lrt",
-          "-lXext",
-          "-lX11",
-        ]
-      }
 
       deps = [
         ":video_capture_internal_impl",
diff --git a/media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.cc b/media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.cc
new file mode 100644
index 000000000000..3dd0a10b4f70
--- /dev/null
+++ b/media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.cc
@@ -0,0 +1,145 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
+#include "mozilla/Preferences.h"
+#include "webrtc/system_wrappers/include/logging.h"
+
+#include "webrtc/modules/video_capture/sfos/device_info_sfos.h"
+
+#define EXPECTED_CAPTURE_DELAY_PREF "media.getusermedia.camera.expected_capture_delay"
+#define MAX_WIDTH_PREF "media.getusermedia.camera.max_width"
+#define MAX_HEIGHT_PREF "media.getusermedia.camera.max_height"
+
+namespace webrtc
+{
+namespace videocapturemodule
+{
+VideoCaptureModule::DeviceInfo*
+VideoCaptureImpl::CreateDeviceInfo()
+{
+    // The caller doesn't check for return value, so I can't Init() here
+    return new videocapturemodule::DeviceInfoSFOS();
+}
+
+DeviceInfoSFOS::DeviceInfoSFOS()
+    : DeviceInfoImpl()
+{
+    Init();
+}
+
+int32_t DeviceInfoSFOS::Init()
+{
+    cameraManager = gecko_camera_manager();
+    // Initialize parent class member
+    _lastUsedDeviceName = (char *)malloc(1);
+    _lastUsedDeviceName[0] = 0;
+    return 0;
+}
+
+DeviceInfoSFOS::~DeviceInfoSFOS()
+{
+}
+
+uint32_t DeviceInfoSFOS::NumberOfDevices()
+{
+    LOG_F(LS_VERBOSE);
+
+    if (cameraManager) {
+        cameraList.clear();
+        for (int i = 0; i < cameraManager->getNumberOfCameras(); i++) {
+            gecko::camera::CameraInfo info;
+            if (cameraManager->getCameraInfo(i, info)) {
+                cameraList.push_back(info);
+            }
+        }
+        // Put front cameras at the top of the list, they are most often used during video chat.
+        std::sort(cameraList.begin(), cameraList.end(),
+                [](const gecko::camera::CameraInfo& c1, const gecko::camera::CameraInfo& c2) {
+                    bool c1front = c1.facing == gecko::camera::GECKO_CAMERA_FACING_FRONT;
+                    bool c2front = c2.facing == gecko::camera::GECKO_CAMERA_FACING_FRONT;
+                    return c1front > c2front;
+            });
+        return cameraList.size();
+    }
+    return 0;
+}
+
+int32_t DeviceInfoSFOS::GetDeviceName(
+        uint32_t deviceNumber,
+        char* deviceNameUTF8,
+        uint32_t deviceNameLength,
+        char* deviceUniqueIdUTF8,
+        uint32_t deviceUniqueIdUTF8Length,
+        char* productUniqueIdUTF8,
+        uint32_t productUniqueIdUTF8Length,
+        pid_t* /*pid*/)
+{
+    if (deviceNumber < cameraList.size()) {
+        gecko::camera::CameraInfo info = cameraList.at(deviceNumber);
+        strncpy(deviceNameUTF8, info.name.c_str(), deviceNameLength);
+        strncpy(deviceUniqueIdUTF8, info.id.c_str(), deviceUniqueIdUTF8Length);
+        strncpy(productUniqueIdUTF8, info.provider.c_str(), productUniqueIdUTF8Length);
+        return 0;
+    }
+
+    return -1;
+}
+
+int32_t DeviceInfoSFOS::CreateCapabilityMap(const char* deviceUniqueIdUTF8)
+{
+    const int32_t deviceUniqueIdUTF8Length =
+                            (int32_t) strlen((char*) deviceUniqueIdUTF8);
+    if (deviceUniqueIdUTF8Length > kVideoCaptureUniqueNameLength) {
+        LOG_F(LS_ERROR) << "Device name too long";
+        return -1;
+    }
+
+    FillCapabilities(deviceUniqueIdUTF8);
+
+    // Store the new used device name. The parent class needs this for some reason
+    _lastUsedDeviceNameLength = deviceUniqueIdUTF8Length;
+    _lastUsedDeviceName = (char*) realloc(_lastUsedDeviceName,
+                                                   _lastUsedDeviceNameLength + 1);
+    memcpy(_lastUsedDeviceName, deviceUniqueIdUTF8, _lastUsedDeviceNameLength + 1);
+
+    LOG_F(LS_INFO) << "Capability map for device " << deviceUniqueIdUTF8
+                   << " size " << _captureCapabilities.size();
+
+    return _captureCapabilities.size();
+}
+
+void DeviceInfoSFOS::FillCapabilities(const char *devName)
+{
+    std::vector<gecko::camera::CameraCapability> caps;
+    unsigned int captureDelay = mozilla::Preferences::GetUint(EXPECTED_CAPTURE_DELAY_PREF, 500);
+    unsigned int maxWidth = mozilla::Preferences::GetUint(MAX_WIDTH_PREF, 640);
+    unsigned int maxHeight = mozilla::Preferences::GetUint(MAX_HEIGHT_PREF, 480);
+
+    _captureCapabilities.clear();
+    if (cameraManager && cameraManager->queryCapabilities(devName, caps)) {
+        for (auto cap : caps) {
+            if (cap.width <= maxWidth && cap.height <= maxHeight) {
+                VideoCaptureCapability vcaps;
+                vcaps.width = cap.width;
+                vcaps.height = cap.height;
+                vcaps.maxFPS = cap.fps;
+                vcaps.expectedCaptureDelay = captureDelay;
+                vcaps.rawType = kVideoI420;
+                vcaps.codecType = kVideoCodecI420;
+                _captureCapabilities.push_back(vcaps);
+            }
+        }
+    }
+}
+
+}  // namespace videocapturemodule
+}  // namespace webrtc
diff --git a/media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.h b/media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.h
new file mode 100644
index 000000000000..7db696b5d176
--- /dev/null
+++ b/media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.h
@@ -0,0 +1,49 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef WEBRTC_MODULES_VIDEO_CAPTURE_MAIN_SOURCE_SFOS_DEVICE_INFO_SFOS_H_
+#define WEBRTC_MODULES_VIDEO_CAPTURE_MAIN_SOURCE_SFOS_DEVICE_INFO_SFOS_H_
+
+#include "webrtc/modules/video_capture/device_info_impl.h"
+#include "webrtc/modules/video_capture/video_capture_impl.h"
+#include "webrtc/base/platform_thread.h"
+
+#include "geckocamera.h"
+
+namespace webrtc
+{
+namespace videocapturemodule
+{
+class DeviceInfoSFOS: public DeviceInfoImpl
+{
+public:
+    DeviceInfoSFOS();
+    virtual ~DeviceInfoSFOS();
+    virtual uint32_t NumberOfDevices();
+    virtual int32_t GetDeviceName(
+        uint32_t deviceNumber,
+        char* deviceNameUTF8,
+        uint32_t deviceNameLength,
+        char* deviceUniqueIdUTF8,
+        uint32_t deviceUniqueIdUTF8Length,
+        char* productUniqueIdUTF8=0,
+        uint32_t productUniqueIdUTF8Length=0,
+        pid_t* pid=0);
+    virtual int32_t CreateCapabilityMap (const char* deviceUniqueIdUTF8);
+    virtual int32_t DisplayCaptureSettingsDialogBox(
+        const char* /*deviceUniqueIdUTF8*/,
+        const char* /*dialogTitleUTF8*/,
+        void* /*parentWindow*/,
+        uint32_t /*positionX*/,
+        uint32_t /*positionY*/) { return -1; }
+    void FillCapabilities(const char* devName);
+    int32_t Init();
+
+private:
+    gecko::camera::CameraManager *cameraManager;
+    std::vector<gecko::camera::CameraInfo> cameraList;
+};
+}  // namespace videocapturemodule
+}  // namespace webrtc
+#endif // WEBRTC_MODULES_VIDEO_CAPTURE_MAIN_SOURCE_SFOS_DEVICE_INFO_SFOS_H_
diff --git a/media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.cc b/media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.cc
new file mode 100644
index 000000000000..47f2c6b803a4
--- /dev/null
+++ b/media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.cc
@@ -0,0 +1,254 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
+#include <new>
+
+#include "webrtc/system_wrappers/include/logging.h"
+#include "webrtc/system_wrappers/include/clock.h"
+#include "webrtc/api/video/i420_buffer.h"
+#include "webrtc/base/refcount.h"
+#include "webrtc/base/scoped_ref_ptr.h"
+
+#include "libyuv/convert.h"
+
+#include "webrtc/modules/video_capture/sfos/video_capture_sfos.h"
+
+namespace webrtc {
+namespace videocapturemodule {
+
+class GeckoVideoBuffer : public VideoFrameBuffer {
+public:
+    static rtc::scoped_refptr<GeckoVideoBuffer> Create(std::shared_ptr<const gecko::camera::CameraFrame> frame, VideoCaptureCapability& cap) {
+        return new rtc::RefCountedObject<GeckoVideoBuffer>(frame, cap);
+    }
+
+    GeckoVideoBuffer(std::shared_ptr<const gecko::camera::CameraFrame> frame, VideoCaptureCapability& cap)
+        : ycbcr(frame),
+          _width(cap.width),
+          _height(cap.height) {}
+
+    int width () const { return _width; };
+    int height() const { return _height; };
+
+    const uint8_t* DataY() const { return (const uint8_t*)ycbcr->y; };
+    const uint8_t* DataU() const { return (const uint8_t*)ycbcr->cb; };
+    const uint8_t* DataV() const { return (const uint8_t*)ycbcr->cr; };
+
+    int StrideY() const { return ycbcr->yStride; };
+    int StrideU() const { return ycbcr->cStride; };
+    int StrideV() const { return ycbcr->cStride; };
+
+    void *native_handle() const { return (void *)&ycbcr; };
+
+    rtc::scoped_refptr<VideoFrameBuffer> NativeToI420Buffer() {
+        rtc::scoped_refptr<I420Buffer> buffer = I420Buffer::Create(
+                _width, _height);
+
+        if (ycbcr->chromaStep == 1) {
+            libyuv::I420Copy(
+                    (const uint8*)ycbcr->y, ycbcr->yStride,
+                    (const uint8*)ycbcr->cb, ycbcr->cStride,
+                    (const uint8*)ycbcr->cr, ycbcr->cStride,
+                    buffer->MutableDataY(), buffer->StrideY(),
+                    buffer->MutableDataU(), buffer->StrideU(),
+                    buffer->MutableDataV(), buffer->StrideV(),
+                    _width, _height);
+        } else if (ycbcr->chromaStep == 2) {
+            libyuv::NV12ToI420(
+                    (const uint8*)ycbcr->y, ycbcr->yStride,
+                    (const uint8*)ycbcr->cb, ycbcr->cStride,
+                    buffer->MutableDataY(), buffer->StrideY(),
+                    buffer->MutableDataU(), buffer->StrideU(),
+                    buffer->MutableDataV(), buffer->StrideV(),
+                    _width, _height);
+        } else {
+            // Unsupported format
+            I420Buffer::SetBlack(buffer.get());
+        }
+        return buffer;
+    }
+
+    bool isPlanar() {
+        return ycbcr->chromaStep == 1;
+    }
+
+private:
+    std::shared_ptr<const gecko::camera::CameraFrame> ycbcr;
+    int _width;
+    int _height;
+};
+
+rtc::scoped_refptr<VideoCaptureModule> VideoCaptureImpl::Create(
+    const char* deviceUniqueId) {
+    rtc::scoped_refptr<VideoCaptureModuleSFOS> implementation(
+        new rtc::RefCountedObject<VideoCaptureModuleSFOS>());
+
+    if (implementation->Init(deviceUniqueId) != 0)
+        return nullptr;
+
+    return implementation;
+}
+
+VideoCaptureModuleSFOS::VideoCaptureModuleSFOS()
+    : VideoCaptureImpl()
+{
+    mozilla::hal::ScreenConfiguration screenConfig;
+
+    mozilla::hal::RegisterScreenConfigurationObserver (this);
+    mozilla::hal::GetCurrentScreenConfiguration (&screenConfig);
+    _screenRotationAngle = ScreenOrientationToAngle (screenConfig.orientation());
+}
+
+int32_t VideoCaptureModuleSFOS::Init(const char* deviceUniqueIdUTF8)
+{
+    /* Fill current device name for the parent class */
+    int len = strlen(deviceUniqueIdUTF8);
+    _deviceUniqueId = new (std::nothrow) char[len + 1];
+    if (_deviceUniqueId) {
+        memcpy(_deviceUniqueId, deviceUniqueIdUTF8, len + 1);
+    } else {
+        return -1;
+    }
+
+    if (gecko_camera_manager()->openCamera(deviceUniqueIdUTF8, _camera)) {
+        gecko::camera::CameraInfo info;
+        if (_camera->getInfo(info)) {
+            _rearFacingCamera = info.facing == gecko::camera::GECKO_CAMERA_FACING_REAR;
+            _sensorMountAngle = info.mountAngle;
+            _camera->setListener(this);
+            return 0;
+        }
+        _camera.reset();
+    }
+    return -1;
+}
+
+VideoCaptureModuleSFOS::~VideoCaptureModuleSFOS()
+{
+    mozilla::hal::UnregisterScreenConfigurationObserver(this);
+}
+
+int32_t VideoCaptureModuleSFOS::StartCapture(
+    const VideoCaptureCapability& capability)
+{
+    if (_camera->captureStarted()) {
+        if (capability.width == _requestedCapability.width
+                && capability.height == _requestedCapability.height
+                && capability.maxFPS == _requestedCapability.maxFPS) {
+            return 0;
+        } else {
+            _camera->stopCapture();
+        }
+    }
+
+    _startNtpTimeMs = webrtc::Clock::GetRealTimeClock()->CurrentNtpInMilliseconds();
+    UpdateCaptureRotation();
+
+    _requestedCapability = capability;
+    _requestedCapability.codecType = kVideoCodecUnknown;
+    _requestedCapability.rawType = kVideoI420;
+
+    gecko::camera::CameraCapability cap;
+    cap.width = capability.width;
+    cap.height = capability.height;
+    cap.fps = capability.maxFPS;
+    return _camera->startCapture(cap) ? 0 : -1;
+}
+
+int32_t VideoCaptureModuleSFOS::StopCapture()
+{
+    return _camera->stopCapture() ? 0 : -1;
+}
+
+bool VideoCaptureModuleSFOS::CaptureStarted()
+{
+    return _camera->captureStarted();
+}
+
+void VideoCaptureModuleSFOS::Notify(const mozilla::hal::ScreenConfiguration& aConfiguration)
+{
+    LOG_F(LS_INFO) << "VideoCaptureModuleSFOS::Notify ScreenConfiguration.orientation: " << aConfiguration.orientation();
+    _screenRotationAngle = ScreenOrientationToAngle(aConfiguration.orientation());
+    UpdateCaptureRotation();
+}
+
+int VideoCaptureModuleSFOS::ScreenOrientationToAngle(mozilla::dom::ScreenOrientationInternal orientation)
+{
+    switch (orientation) {
+    // The default orientation is portrait for Sailfish OS.
+    case mozilla::dom::eScreenOrientation_Default:
+    case mozilla::dom::eScreenOrientation_PortraitPrimary:
+        return 0;
+    case mozilla::dom::eScreenOrientation_LandscapePrimary:
+        return 90;
+    case mozilla::dom::eScreenOrientation_PortraitSecondary:
+        return 180;
+    case mozilla::dom::eScreenOrientation_LandscapeSecondary:
+        return 270;
+    default:
+        return 0;
+    }
+}
+
+void VideoCaptureModuleSFOS::onCameraFrame(std::shared_ptr<const gecko::camera::CameraFrame> frame)
+{
+    LOG_F(LS_VERBOSE) << "frame ts=" << (frame->timestampMs + _startNtpTimeMs);
+
+    auto buffer = GeckoVideoBuffer::Create(frame, _requestedCapability);
+    if (buffer->isPlanar()) {
+        // Do not copy planar frame, use as is
+        IncomingVideoBuffer(buffer, frame->timestampMs + _startNtpTimeMs);
+    } else {
+        // Semi-planar frame is incompatible with current implementation, so convert it to I420
+        IncomingVideoBuffer(buffer->NativeToI420Buffer(), frame->timestampMs + _startNtpTimeMs);
+    }
+}
+
+void VideoCaptureModuleSFOS::onCameraError(std::string errorDescription)
+{
+    LOG_F(LS_ERROR) << "Camera error " << errorDescription << "\n";
+}
+
+void VideoCaptureModuleSFOS::UpdateCaptureRotation()
+{
+    VideoRotation rotation;
+    int rotateAngle = 360 + _sensorMountAngle + (_rearFacingCamera ? -_screenRotationAngle : _screenRotationAngle);
+
+    switch (rotateAngle % 360) {
+    case 90:
+        rotation = kVideoRotation_90;
+        break;
+    case 180:
+        rotation = kVideoRotation_180;
+        break;
+    case 270:
+        rotation = kVideoRotation_270;
+        break;
+    default:
+        rotation = kVideoRotation_0;
+        break;
+    }
+
+    LOG_F(LS_INFO) << "Sensor mount angle=" << _sensorMountAngle
+                   << " Screen rotation=" << _screenRotationAngle
+                   << " Capture rotation=" << rotateAngle;
+    VideoCaptureImpl::SetCaptureRotation (rotation);
+}
+
+int32_t VideoCaptureModuleSFOS::CaptureSettings(VideoCaptureCapability& settings)
+{
+    settings = _requestedCapability;
+    return 0;
+}
+}  // namespace videocapturemodule
+}  // namespace webrtc
diff --git a/media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.h b/media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.h
new file mode 100644
index 000000000000..01271c62076c
--- /dev/null
+++ b/media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.h
@@ -0,0 +1,55 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef WEBRTC_MODULES_VIDEO_CAPTURE_MAIN_SOURCE_SFOS_VIDEO_CAPTURE_SFOS_H_
+#define WEBRTC_MODULES_VIDEO_CAPTURE_MAIN_SOURCE_SFOS_VIDEO_CAPTURE_SFOS_H_
+
+#include <memory>
+
+#include "mozilla/Hal.h"
+#include "mozilla/dom/ScreenOrientation.h"
+
+#include "webrtc/common_types.h"
+#include "webrtc/modules/video_capture/video_capture_impl.h"
+
+#include "geckocamera.h"
+
+namespace webrtc
+{
+class CriticalSectionWrapper;
+namespace videocapturemodule
+{
+class VideoCaptureModuleSFOS
+    : public VideoCaptureImpl,
+      public gecko::camera::CameraListener,
+      public mozilla::hal::ScreenConfigurationObserver
+{
+public:
+    VideoCaptureModuleSFOS();
+    virtual ~VideoCaptureModuleSFOS();
+    virtual int32_t Init(const char* deviceUniqueId);
+    virtual int32_t StartCapture(const VideoCaptureCapability& capability);
+    virtual int32_t StopCapture();
+    virtual bool CaptureStarted();
+    virtual int32_t CaptureSettings(VideoCaptureCapability& settings);
+
+    void onCameraFrame(std::shared_ptr<const gecko::camera::CameraFrame> frame);
+    void onCameraError(std::string errorDescription);
+
+    virtual void Notify(const mozilla::hal::ScreenConfiguration& aConfiguration) override;
+
+private:
+    int ScreenOrientationToAngle(mozilla::dom::ScreenOrientationInternal orientation);
+    void UpdateCaptureRotation();
+
+    int _screenRotationAngle = 0;
+    int _sensorMountAngle = 0;
+    bool _rearFacingCamera = false;
+    uint64_t _startNtpTimeMs = 0;
+    std::shared_ptr<gecko::camera::Camera> _camera;
+};
+}  // namespace videocapturemodule
+}  // namespace webrtc
+
+#endif // WEBRTC_MODULES_VIDEO_CAPTURE_MAIN_SOURCE_SFOS_VIDEO_CAPTURE_SFOS_H_
diff --git a/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_impl.cc b/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_impl.cc
index ad8ab3b39f35..fb9f97870955 100644
--- a/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_impl.cc
+++ b/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_impl.cc
@@ -286,5 +286,17 @@ uint32_t VideoCaptureImpl::CalculateFrameRate(int64_t now_ns)
 
     return nrOfFrames;
 }
+
+int32_t VideoCaptureImpl::IncomingVideoBuffer(const rtc::scoped_refptr<VideoFrameBuffer>& buffer, uint64_t captureTime)
+{
+    CriticalSectionScoped cs(&_apiCs);
+    VideoFrame captureFrame(
+          buffer, 0, rtc::TimeMillis(),
+          !apply_rotation_ ? _rotateFrame : kVideoRotation_0);
+    captureFrame.set_ntp_time_ms(captureTime);
+    captureFrame.set_rotation(_rotateFrame);
+    DeliverCapturedFrame(captureFrame);
+    return 0;
+}
 }  // namespace videocapturemodule
 }  // namespace webrtc
diff --git a/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_impl.h b/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_impl.h
index c5d62b4b54d7..cf30037bcfe5 100644
--- a/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_impl.h
+++ b/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_impl.h
@@ -79,6 +79,8 @@ public:
                           const VideoCaptureCapability& frameInfo,
                           int64_t captureTime = 0) override;
 
+    int32_t IncomingVideoBuffer(const rtc::scoped_refptr<VideoFrameBuffer>& buffer, uint64_t captureTime);
+
     // Platform dependent
     int32_t StartCapture(const VideoCaptureCapability& capability) override
     {
diff --git a/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_internal_impl_gn/moz.build b/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_internal_impl_gn/moz.build
index 32d4302d2550..afa43e44cc67 100644
--- a/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_internal_impl_gn/moz.build
+++ b/media/webrtc/trunk/webrtc/modules/video_capture/video_capture_internal_impl_gn/moz.build
@@ -128,11 +128,20 @@ if CONFIG["OS_TARGET"] == "Linux":
         "rt"
     ]
 
+    LOCAL_INCLUDES += [ "/media/libyuv/libyuv/include/" ]
+    OS_LIBS += CONFIG["LIBGECKOCAMERA_LIBS"]
+
     UNIFIED_SOURCES += [
-        "/media/webrtc/trunk/webrtc/modules/video_capture/linux/device_info_linux.cc",
-        "/media/webrtc/trunk/webrtc/modules/video_capture/linux/video_capture_linux.cc"
+        "/media/webrtc/trunk/webrtc/modules/video_capture/sfos/device_info_sfos.cc",
+        "/media/webrtc/trunk/webrtc/modules/video_capture/sfos/video_capture_sfos.cc"
     ]
 
+    CXXFLAGS += CONFIG["LIBGECKOCAMERA_CFLAGS"]
+
+    # Make Hal.h buildable
+    CXXFLAGS += CONFIG["NSPR_CFLAGS"]
+    CXXFLAGS += CONFIG["MOZ_PIXMAN_CFLAGS"]
+
 if CONFIG["OS_TARGET"] == "NetBSD":
 
     DEFINES["USE_X11"] = "1"
diff --git a/old-configure.in b/old-configure.in
index 5f0b6a1ecd6e..7c0a35c3a6f2 100644
--- a/old-configure.in
+++ b/old-configure.in
@@ -2552,6 +2552,17 @@ if test -n "$MOZ_WEBRTC"; then
     if test -n "$MOZ_X11"; then
       MOZ_WEBRTC_X11_LIBS="-lXext -lXdamage -lXfixes -lXcomposite"
     fi
+
+    MOZ_ENABLE_WEBRTC_GECKOCAMERA=
+    PKG_CHECK_MODULES(LIBGECKOCAMERA, geckocamera,
+                      MOZ_ENABLE_WEBRTC_GECKOCAMERA=1,
+                      MOZ_ENABLE_WEBRTC_GECKOCAMERA=)
+    if test "$MOZ_ENABLE_WEBRTC_GECKOCAMERA"; then
+       MOZ_ENABLE_WEBRTC_GECKOCAMERA=1
+       AC_DEFINE(MOZ_ENABLE_WEBRTC_GECKOCAMERA)
+       AC_SUBST(MOZ_ENABLE_WEBRTC_GECKOCAMERA)
+    fi
+
 fi
 
 dnl ========================================================
-- 
2.17.1

