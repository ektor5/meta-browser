From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Adam Pigg <adam@piggz.co.uk>
Date: Wed, 31 Mar 2021 17:18:45 +0100
Subject: [PATCH] [sailfishos][embedlite][egl] Fix mesa egl display and buffer
 initialisation

Ensure the same display is used for all initialisations to avoid
creating multiple wayland connections.

Fallback to a wayland window surface in case pixel buffers aren't
supported. This is needed on the emulator.

Contributing authors:
  Adam Pigg <adam@piggz.co.uk>
  David Llewellyn-Jones <david.llewellyn-jones@jolla.com>
  Frajo Haider <franz.haider@jolla.com>
---
 gfx/gl/GLContextProviderEGL.cpp | 219 +++++++++++++++++++++++++++++---
 gfx/gl/GLContextProviderImpl.h  |   3 +-
 gfx/gl/GLLibraryEGL.cpp         |  25 ++--
 gfx/gl/GLLibraryEGL.h           |   9 +-
 4 files changed, 225 insertions(+), 31 deletions(-)

diff --git a/gfx/gl/GLContextProviderEGL.cpp b/gfx/gl/GLContextProviderEGL.cpp
index dc0714a84351..88f141eae912 100644
--- a/gfx/gl/GLContextProviderEGL.cpp
+++ b/gfx/gl/GLContextProviderEGL.cpp
@@ -77,6 +77,14 @@
 #  include "mozilla/widget/GtkCompositorWidget.h"
 #endif
 
+#ifdef MOZ_WIDGET_QT
+#include <qpa/qplatformnativeinterface.h>
+#include <QGuiApplication>
+#include <dlfcn.h>
+
+#define IS_WAYLAND_DISPLAY() (true)
+#endif
+
 #if defined(MOZ_WAYLAND)
 #  include "nsDataHashtable.h"
 
@@ -98,7 +106,7 @@ namespace gl {
 
 using namespace mozilla::widget;
 
-#if defined(MOZ_WAYLAND)
+#if defined(MOZ_WAYLAND) || defined(MOZ_WIDGET_QT)
 class WaylandGLSurface {
  public:
   WaylandGLSurface(struct wl_surface* aWaylandSurface,
@@ -162,6 +170,115 @@ static int next_power_of_two(int v) {
   return v;
 }
 
+// Use the main app's EGLDisplay to avoid creating multiple Wayland connections
+// See JB#56215
+static EGLDisplay GetAppDisplay() {
+#ifdef MOZ_WIDGET_QT
+  QPlatformNativeInterface* interface = QGuiApplication::platformNativeInterface();
+  MOZ_ASSERT(interface);
+  return (EGLDisplay)(interface->nativeResourceForIntegration(QByteArrayLiteral("egldisplay")));
+#else
+  return EGL_NO_DISPLAY;
+#endif
+}
+
+#ifdef MOZ_WIDGET_QT
+#define WL_COMPOSITOR_CREATE_SURFACE 0
+#define WL_SURFACE_DESTROY 0
+
+// Used for lifetime management of the dynamically loaded wayland libraries
+static bool waylandFunctionsLoaded = false;
+static void *waylandEglHandle = nullptr;
+static void *waylandClientHandle = nullptr;
+
+// See /usr/include/wayland-egl-core.h
+static struct wl_egl_window * (*_wl_egl_window_create)(struct wl_surface *surface, int width, int height) = nullptr;
+static void (*_wl_egl_window_destroy)(struct wl_egl_window *egl_window) = nullptr;
+
+// See /usr/include/wayland-client-protocol.h
+static const struct wl_interface *_wl_surface_interface = nullptr;
+
+// See wayland/src/wayland-client-core.h
+static struct wl_proxy * (*_wl_proxy_marshal_constructor)(struct wl_proxy *proxy, uint32_t opcode, const struct wl_interface *interface, ...) = nullptr;
+static void (*_wl_proxy_marshal)(struct wl_proxy *p, uint32_t opcode, ...) = nullptr;
+static void (*_wl_proxy_destroy)(struct wl_proxy *proxy) = nullptr;
+
+static inline struct wl_surface * _wl_compositor_create_surface(struct wl_compositor *wl_compositor)
+{
+  MOZ_ASSERT(_wl_proxy_marshal_constructor);
+  struct wl_proxy *id;
+  id = _wl_proxy_marshal_constructor((struct wl_proxy *) wl_compositor, WL_COMPOSITOR_CREATE_SURFACE, _wl_surface_interface, NULL);
+  return (struct wl_surface *) id;
+}
+
+static inline void _wl_surface_destroy(struct wl_surface *wl_surface)
+{
+  MOZ_ASSERT(_wl_proxy_marshal);
+  MOZ_ASSERT(_wl_proxy_destroy);
+  _wl_proxy_marshal((struct wl_proxy *) wl_surface, WL_SURFACE_DESTROY);
+  _wl_proxy_destroy((struct wl_proxy *) wl_surface);
+}
+
+static bool LoadWaylandFunctions() {
+  if (waylandFunctionsLoaded) {
+    // We load everything or nothing
+    return true;
+  }
+
+  // wl_egl_window_create
+  // wl_egl_window_destroy
+  // Library will be unloaded when GLContextEGL is destroyed and sWaylandGLSurface is empty
+  waylandEglHandle = dlopen("libwayland-egl.so.1", RTLD_LAZY);
+  if (!waylandEglHandle) {
+    NS_WARNING("Error opening libwayland-egl.so.1");
+    return false;
+  }
+  *(void **)(&_wl_egl_window_create) = dlsym(waylandEglHandle, "wl_egl_window_create");
+  *(void **)(&_wl_egl_window_destroy) = dlsym(waylandEglHandle, "wl_egl_window_destroy");
+
+  if (!_wl_egl_window_create || !_wl_egl_window_destroy) {
+    NS_WARNING("Error loading functions from libwayland-egl.so.1");
+    dlclose(waylandEglHandle);
+    return false;
+  }
+
+  // wl_surface_interface
+  // wl_proxy_marshal_constructor
+  // wl_proxy_marshal, wl_proxy_destroy
+  // Library will be unloaded when GLContextEGL is destroyed and sWaylandGLSurface is empty
+  waylandClientHandle = dlopen("libwayland-client.so.0", RTLD_LAZY);
+  if (!waylandClientHandle) {
+    NS_WARNING("Error opening libwayland-client.so.0");
+    dlclose(waylandEglHandle);
+    return false;
+  }
+  _wl_surface_interface = (const struct wl_interface *)dlsym(waylandClientHandle, "wl_surface_interface");
+
+  *(void **)(&_wl_proxy_marshal_constructor) = dlsym(waylandClientHandle, "wl_proxy_marshal_constructor");
+  *(void **)(&_wl_proxy_marshal) = dlsym(waylandClientHandle, "wl_proxy_marshal");
+  *(void **)(&_wl_proxy_destroy) = dlsym(waylandClientHandle, "wl_proxy_destroy");
+
+  if (!_wl_surface_interface || !_wl_proxy_marshal_constructor || !_wl_proxy_marshal || !_wl_proxy_destroy) {
+    _wl_proxy_marshal_constructor = nullptr;
+    NS_WARNING("Error loading functions from libwayland-egl.so.1");
+    dlclose(waylandEglHandle);
+    dlclose(waylandClientHandle);
+    return false;
+  }
+
+  waylandFunctionsLoaded = true;
+  return true;
+}
+
+static void UnloadWaylandFunctions() {
+  if (waylandFunctionsLoaded) {
+    dlclose(waylandEglHandle);
+    dlclose(waylandClientHandle);
+    waylandFunctionsLoaded = false;
+  }
+}
+#endif
+
 static bool is_power_of_two(int v) {
   NS_ASSERTION(v >= 0, "bad value");
 
@@ -177,7 +294,7 @@ static void DestroySurface(GLLibraryEGL* const egl,
     egl->fMakeCurrent(egl->Display(), EGL_NO_SURFACE, EGL_NO_SURFACE,
                       EGL_NO_CONTEXT);
     egl->fDestroySurface(egl->Display(), oldSurface);
-#if defined(MOZ_WAYLAND)
+#if defined(MOZ_WAYLAND) || defined(MOZ_WIDGET_QT)
     DeleteWaylandGLSurface(oldSurface);
 #endif
   }
@@ -186,7 +303,7 @@ static void DestroySurface(GLLibraryEGL* const egl,
 static EGLSurface CreateFallbackSurface(GLLibraryEGL* const egl,
                                         const EGLConfig& config) {
   nsCString discardFailureId;
-  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId)) {
+  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId, GetAppDisplay())) {
     gfxCriticalNote << "Failed to load EGL library 3!";
     return EGL_NO_SURFACE;
   }
@@ -254,7 +371,7 @@ class GLContextEGLFactory {
 already_AddRefed<GLContext> GLContextEGLFactory::CreateImpl(
     EGLNativeWindowType aWindow, bool aWebRender, bool aUseGles) {
   nsCString discardFailureId;
-  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId)) {
+  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId, GetAppDisplay())) {
     gfxCriticalNote << "Failed to load EGL library 3!";
     return nullptr;
   }
@@ -334,7 +451,7 @@ already_AddRefed<GLContext> GLContextEGLFactory::Create(
 EGLSurface GLContextEGL::CreateEGLSurfaceForCompositorWidget(
     widget::CompositorWidget* aCompositorWidget, const EGLConfig aConfig) {
   nsCString discardFailureId;
-  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId)) {
+  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId, GetAppDisplay())) {
     gfxCriticalNote << "Failed to load EGL library 6!";
     return EGL_NO_SURFACE;
   }
@@ -391,6 +508,13 @@ GLContextEGL::~GLContextEGL() {
 
   mozilla::gl::DestroySurface(mEgl, mSurface);
   mozilla::gl::DestroySurface(mEgl, mFallbackSurface);
+
+#if defined(MOZ_WIDGET_QT)
+  // If there are no active surfaces, close the wayload libraries
+  if (sWaylandGLSurface.Count() == 0) {
+    UnloadWaylandFunctions();
+  }
+#endif
 }
 
 bool GLContextEGL::Init() {
@@ -769,6 +893,22 @@ TRY_AGAIN_POWER_OF_TWO:
   return surface;
 }
 
+#if defined(MOZ_WIDGET_QT)
+WaylandGLSurface::WaylandGLSurface(struct wl_surface* aWaylandSurface,
+                                   struct wl_egl_window* aEGLWindow)
+    : mWaylandSurface(aWaylandSurface), mEGLWindow(aEGLWindow) {}
+
+WaylandGLSurface::~WaylandGLSurface() {
+  if (!LoadWaylandFunctions()) {
+    NS_WARNING("Failed to load dynamic Wayland functions");
+    return;
+  }
+
+  _wl_egl_window_destroy(mEGLWindow);
+  _wl_surface_destroy(mWaylandSurface);
+}
+#endif
+
 #if defined(MOZ_WAYLAND)
 WaylandGLSurface::WaylandGLSurface(struct wl_surface* aWaylandSurface,
                                    struct wl_egl_window* aEGLWindow)
@@ -808,6 +948,31 @@ EGLSurface GLContextEGL::CreateWaylandBufferSurface(
 }
 #endif
 
+#ifdef MOZ_WIDGET_QT
+EGLSurface CreateEmulatorBufferSurface(
+    GLLibraryEGL* const egl, EGLConfig config, mozilla::gfx::IntSize& pbsize) {
+  if (!LoadWaylandFunctions()) {
+    NS_WARNING("Failed to load dynamic wayland functions");
+    return nullptr;
+  }
+
+  QPlatformNativeInterface* interface = QGuiApplication::platformNativeInterface();
+  struct wl_compositor *compositor = (struct wl_compositor *)(interface->nativeResourceForIntegration(QByteArrayLiteral("compositor")));
+
+  struct wl_surface * wlsurface = _wl_compositor_create_surface(compositor);
+  struct wl_egl_window* eglwindow = _wl_egl_window_create(wlsurface, pbsize.width, pbsize.height);
+  EGLSurface surface = egl->fCreateWindowSurface(egl->Display(), config, eglwindow, 0);
+
+  if (surface) {
+    WaylandGLSurface* waylandData = new WaylandGLSurface(wlsurface, eglwindow);
+    auto entry = sWaylandGLSurface.LookupForAdd(surface);
+    entry.OrInsert([&waylandData]() { return waylandData; });
+  }
+
+  return surface;
+}
+#endif
+
 static const EGLint kEGLConfigAttribsRGB16[] = {
     LOCAL_EGL_SURFACE_TYPE, LOCAL_EGL_WINDOW_BIT,
     LOCAL_EGL_RED_SIZE,     5,
@@ -928,9 +1093,9 @@ static bool CreateConfigScreen(GLLibraryEGL* const egl,
 }
 
 already_AddRefed<GLContext> GLContextProviderEGL::CreateWrappingExisting(
-    void* aContext, void* aSurface) {
+    void* aContext, void* aSurface, void* aDisplay) {
   nsCString discardFailureId;
-  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId)) {
+  if (!GLLibraryEGL::EnsureInitialized(false, &discardFailureId, aDisplay)) {
     MOZ_CRASH("GFX: Failed to load EGL library 2!");
     return nullptr;
   }
@@ -1015,6 +1180,7 @@ void GLContextProviderEGL::DestroyEGLSurface(EGLSurface surface) {
 
 static void FillOffscreenContextAttribs(bool alpha, bool depth, bool stencil,
                                         bool bpp16, bool es3, bool useGles,
+                                        bool useWindow,
                                         nsTArray<EGLint>* out) {
   out->AppendElement(LOCAL_EGL_SURFACE_TYPE);
 #if defined(MOZ_WAYLAND)
@@ -1026,7 +1192,11 @@ static void FillOffscreenContextAttribs(bool alpha, bool depth, bool stencil,
     out->AppendElement(LOCAL_EGL_PBUFFER_BIT);
   }
 #else
-  out->AppendElement(LOCAL_EGL_PBUFFER_BIT);
+  if (useWindow) {
+    out->AppendElement(LOCAL_EGL_WINDOW_BIT);
+  } else {
+    out->AppendElement(LOCAL_EGL_PBUFFER_BIT);
+  }
 #endif
 
   if (useGles) {
@@ -1091,13 +1261,13 @@ static GLint GetAttrib(GLLibraryEGL* egl, EGLConfig config, EGLint attrib) {
 static EGLConfig ChooseConfigOffscreen(GLLibraryEGL* egl,
                                        CreateContextFlags flags,
                                        const SurfaceCaps& minCaps,
-                                       bool aUseGles,
+                                       bool aUseGles, bool useWindow,
                                        SurfaceCaps* const out_configCaps) {
   nsTArray<EGLint> configAttribList;
   FillOffscreenContextAttribs(minCaps.alpha, minCaps.depth, minCaps.stencil,
                               minCaps.bpp16,
                               bool(flags & CreateContextFlags::PREFER_ES3),
-                              aUseGles, &configAttribList);
+                              aUseGles, useWindow, &configAttribList);
 
   const EGLint* configAttribs = configAttribList.Elements();
 
@@ -1107,6 +1277,7 @@ static EGLConfig ChooseConfigOffscreen(GLLibraryEGL* egl,
   const EGLint kMaxConfigs = 1;
   EGLConfig configs[kMaxConfigs];
   EGLint foundConfigs = 0;
+
   if (!egl->fChooseConfig(egl->Display(), configAttribs, configs, kMaxConfigs,
                           &foundConfigs) ||
       foundConfigs == 0) {
@@ -1132,6 +1303,7 @@ GLContextEGL::CreateEGLPBufferOffscreenContextImpl(
     CreateContextFlags flags, const mozilla::gfx::IntSize& size,
     const SurfaceCaps& minCaps, bool aUseGles,
     nsACString* const out_failureId) {
+
   bool forceEnableHardware =
       bool(flags & CreateContextFlags::FORCE_ENABLE_HARDWARE);
   if (!GLLibraryEGL::EnsureInitialized(forceEnableHardware, out_failureId)) {
@@ -1140,8 +1312,19 @@ GLContextEGL::CreateEGLPBufferOffscreenContextImpl(
 
   auto* egl = gl::GLLibraryEGL::Get();
   SurfaceCaps configCaps;
+  bool useWindow = false;
   EGLConfig config =
-      ChooseConfigOffscreen(egl, flags, minCaps, aUseGles, &configCaps);
+      ChooseConfigOffscreen(egl, flags, minCaps, aUseGles, useWindow, &configCaps);
+#if defined(MOZ_WIDGET_QT)
+  if (config == EGL_NO_CONFIG) {
+#ifdef DEBUG
+    printf_stderr("No pixel buffer config availabie, trying a window surface instead.\n");
+#endif
+    useWindow = true;
+    config = ChooseConfigOffscreen(egl, flags, minCaps, aUseGles, useWindow, &configCaps);
+  }
+#endif
+
   if (config == EGL_NO_CONFIG) {
     *out_failureId = NS_LITERAL_CSTRING("FEATURE_FAILURE_EGL_NO_CONFIG");
     NS_WARNING("Failed to find a compatible config.");
@@ -1160,9 +1343,14 @@ GLContextEGL::CreateEGLPBufferOffscreenContextImpl(
   } else
 #endif
   {
-    surface = GLContextEGL::CreatePBufferSurfaceTryingPowerOfTwo(
-        egl, config, LOCAL_EGL_NONE, pbSize);
+    if (useWindow) {
+      surface = CreateEmulatorBufferSurface(egl, config, pbSize);
+    } else {
+      surface = GLContextEGL::CreatePBufferSurfaceTryingPowerOfTwo(
+          egl, config, LOCAL_EGL_NONE, pbSize);
+    }
   }
+
   if (!surface) {
     *out_failureId = NS_LITERAL_CSTRING("FEATURE_FAILURE_EGL_POT");
     NS_WARNING("Failed to create PBuffer for context!");
@@ -1174,7 +1362,7 @@ GLContextEGL::CreateEGLPBufferOffscreenContextImpl(
   if (!gl) {
     NS_WARNING("Failed to create GLContext from PBuffer");
     egl->fDestroySurface(egl->Display(), surface);
-#if defined(MOZ_WAYLAND)
+#if defined(MOZ_WAYLAND) || defined(MOZ_WIDGET_QT)
     DeleteWaylandGLSurface(surface);
 #endif
     return nullptr;
@@ -1212,8 +1400,9 @@ already_AddRefed<GLContext> GLContextProviderEGL::CreateOffscreen(
     CreateContextFlags flags, nsACString* const out_failureId) {
   bool forceEnableHardware =
       bool(flags & CreateContextFlags::FORCE_ENABLE_HARDWARE);
+
   if (!GLLibraryEGL::EnsureInitialized(
-          forceEnableHardware, out_failureId)) {  // Needed for IsANGLE().
+          forceEnableHardware, out_failureId, GetAppDisplay())) {  // Needed for IsANGLE().
     return nullptr;
   }
 
diff --git a/gfx/gl/GLContextProviderImpl.h b/gfx/gl/GLContextProviderImpl.h
index d6bbb152ffeb..0ba17a38e636 100644
--- a/gfx/gl/GLContextProviderImpl.h
+++ b/gfx/gl/GLContextProviderImpl.h
@@ -82,7 +82,8 @@ class GL_CONTEXT_PROVIDER_NAME {
    * @return Wrapping Context to use for rendering
    */
   static already_AddRefed<GLContext> CreateWrappingExisting(void* aContext,
-                                                            void* aSurface);
+                                                            void* aSurface,
+                                                            void* aDisplay);
 
 #if defined(MOZ_WIDGET_ANDROID)
   static EGLSurface CreateEGLSurface(void* aWindow,
diff --git a/gfx/gl/GLLibraryEGL.cpp b/gfx/gl/GLLibraryEGL.cpp
index 6da0016f256b..13b69f2427c1 100644
--- a/gfx/gl/GLLibraryEGL.cpp
+++ b/gfx/gl/GLLibraryEGL.cpp
@@ -233,12 +233,12 @@ static bool IsAccelAngleSupported(const nsCOMPtr<nsIGfxInfo>& gfxInfo,
   return (angleSupport == nsIGfxInfo::FEATURE_STATUS_OK);
 }
 
-static EGLDisplay GetAndInitDisplay(GLLibraryEGL& egl, void* displayType) {
-  EGLDisplay display = egl.fGetDisplay(displayType);
-  if (display == EGL_NO_DISPLAY) return EGL_NO_DISPLAY;
-
-  if (!egl.fInitialize(display, nullptr, nullptr)) return EGL_NO_DISPLAY;
-
+static EGLDisplay GetAndInitDisplay(GLLibraryEGL& egl, void* displayType, EGLDisplay display = EGL_NO_DISPLAY) {
+  if (display == EGL_NO_DISPLAY) {
+      display = egl.fGetDisplay(displayType);
+      if (display == EGL_NO_DISPLAY) return EGL_NO_DISPLAY;
+      if (!egl.fInitialize(display, nullptr, nullptr)) return EGL_NO_DISPLAY;
+  }
   return display;
 }
 
@@ -380,11 +380,11 @@ Maybe<SymbolLoader> GLLibraryEGL::GetSymbolLoader() const {
 
 /* static */
 bool GLLibraryEGL::EnsureInitialized(bool forceAccel,
-                                     nsACString* const out_failureId) {
+                                     nsACString* const out_failureId, EGLDisplay aDisplay) {
   if (!sEGLLibrary) {
     sEGLLibrary = new GLLibraryEGL();
   }
-  return sEGLLibrary->DoEnsureInitialized(forceAccel, out_failureId);
+  return sEGLLibrary->DoEnsureInitialized(forceAccel, out_failureId, aDisplay);
 }
 
 bool GLLibraryEGL::DoEnsureInitialized() {
@@ -393,7 +393,7 @@ bool GLLibraryEGL::DoEnsureInitialized() {
 }
 
 bool GLLibraryEGL::DoEnsureInitialized(bool forceAccel,
-                                       nsACString* const out_failureId) {
+                                       nsACString* const out_failureId, EGLDisplay aDisplay) {
   if (mInitialized && !mSymbols.fTerminate) {
     *out_failureId = NS_LITERAL_CSTRING("FEATURE_FAILURE_EGL_DESTROYED");
     MOZ_ASSERT(false);
@@ -575,7 +575,7 @@ bool GLLibraryEGL::DoEnsureInitialized(bool forceAccel,
     }
   }
 
-  mEGLDisplay = CreateDisplay(forceAccel, gfxInfo, out_failureId);
+  mEGLDisplay = CreateDisplay(forceAccel, gfxInfo, out_failureId, aDisplay);
   if (!mEGLDisplay) {
     return false;
   }
@@ -756,7 +756,8 @@ void GLLibraryEGL::Shutdown() {
 
 EGLDisplay GLLibraryEGL::CreateDisplay(bool forceAccel,
                                        const nsCOMPtr<nsIGfxInfo>& gfxInfo,
-                                       nsACString* const out_failureId) {
+                                       nsACString* const out_failureId,
+                                       EGLDisplay aDisplay) {
   MOZ_ASSERT(!mInitialized);
 
   EGLDisplay chosenDisplay = nullptr;
@@ -822,7 +823,7 @@ EGLDisplay GLLibraryEGL::CreateDisplay(bool forceAccel,
       }
     }
 #endif
-    chosenDisplay = GetAndInitDisplay(*this, nativeDisplay);
+    chosenDisplay = GetAndInitDisplay(*this, nativeDisplay, aDisplay);
   }
 
   if (!chosenDisplay) {
diff --git a/gfx/gl/GLLibraryEGL.h b/gfx/gl/GLLibraryEGL.h
index c653229d7d5d..11319f7aada7 100644
--- a/gfx/gl/GLLibraryEGL.h
+++ b/gfx/gl/GLLibraryEGL.h
@@ -408,7 +408,8 @@ class GLLibraryEGL final {
   inline static GLLibraryEGL* Get() { return sEGLLibrary; }
 
   static bool EnsureInitialized(bool forceAccel,
-                                nsACString* const out_failureId);
+                                nsACString* const out_failureId,
+                                EGLDisplay aDisplay = EGL_NO_DISPLAY);
 
   void Shutdown();
 
@@ -541,9 +542,11 @@ class GLLibraryEGL final {
 
  private:
   bool DoEnsureInitialized();
-  bool DoEnsureInitialized(bool forceAccel, nsACString* const out_failureId);
+  bool DoEnsureInitialized(bool forceAccel, nsACString* const out_failureId,
+                           EGLDisplay aDisplay = EGL_NO_DISPLAY);
   EGLDisplay CreateDisplay(bool forceAccel, const nsCOMPtr<nsIGfxInfo>& gfxInfo,
-                           nsACString* const out_failureId);
+                           nsACString* const out_failureId,
+                           EGLDisplay aDisplay = EGL_NO_DISPLAY);
 
   bool mInitialized = false;
   PRLibrary* mEGLLibrary = nullptr;
-- 
2.26.2

